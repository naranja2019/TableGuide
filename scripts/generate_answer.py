from utils.request_gpt import request_gpt_chat

def generate_final_answer(question, plan, final_subtable_with_header, prompt):
    """
    Generates a final answer by combining the question, solution plan, and subtable.

    Args:
        question: The input question to be answered.
        plan: The solution plan, which contains multiple stages with sub-level questions.
        final_subtable_with_header: A table with column headers and data, used to provide context for answering the question.
        prompt: The template prompt to be filled with the question, table, and plan.

    Returns:
        The final answer generated by GPT after processing the prompt.
    """
    col_headers = final_subtable_with_header[0]
    subtable = final_subtable_with_header[1:]

    subtable_md = "| " + " | ".join(col_headers) + " |\n"
    subtable_md += "| " + " | ".join(["---"] * len(col_headers)) + " |\n"
    for row in subtable:
        subtable_md += "| " + " | ".join(map(str, row)) + " |\n"

    plan_text = ""
    for stage in plan:
        plan_text += f"Stage {stage['Stage']}:\n"
        plan_text += f"  Sub-Level-Question: {stage['Sub-Level-Question']}\n"

    prompt = prompt.format(question=question, table=subtable_md, plan=plan_text)

    final_answer = request_gpt_chat(prompt=prompt)

    return final_answer


def generate_noplan_answer(question, table_with_header, prompt):
    """
    Generates an answer by combining the question and table without a solution plan.

    Args:
        question: The input question to be answered.
        table_with_header: A table with column headers and data, used to provide context for answering the question.
        prompt: The template prompt to be filled with the question and table.

    Returns:
        The final answer generated by GPT after processing the prompt.
    """
    col_headers = table_with_header[0]
    table = table_with_header[1:]

    table_md = "| " + " | ".join(col_headers) + " |\n"
    table_md += "| " + " | ".join(["---"] * len(col_headers)) + " |\n"
    for row in table:
        table_md += "| " + " | ".join(map(str, row)) + " |\n"

    prompt = prompt.format(question=question, table=table_md)

    final_answer = request_gpt_chat(prompt=prompt)

    return final_answer
